{"version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":852,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/vmaudgalya/projects/mep/server"],"buffers":[{"text":"\nvar r = require('rethinkdb'), conn;\n\nmodule.exports.initConnection = function (config) {\n  \n  r.connect(config, function(error, c) {\n        if (error) {\n            console.log(error);\n        }\n        else {\n            conn = c;     \n        }\n  });\n  return conn;\n};\n\nmodule.exports.getConnection = function () {\n  return conn;\n}","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":2,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":3,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/mep/server/lib/db.js","digestWhenLastPersisted":"eb58e0b1d53cac3dc3f368dab872a096ff981ce9","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"var r = require('rethinkdb'),\n    _ = require('lodash'),\n    db = require('../lib/db'),\n    log = require(\"../lib/log\");\n\nfunction getDashboard (req, res, next) {\n\n    log.info(req.query);\n\n    r.table('dashboard')\n        .getAll(req.query.eacn, {index: 'owner'})\n        .forEach (function(dashboard) {\n        return dashboard.merge(function (dashboard) {\n            return {\n                apps : dashboard('apps').eqJoin('appId', r.table('apps')).without({'left': 'appId'}).zip()\n            }\n        })\n    })\n\n    .run(db.getConnection(), function (err, result) {\n\n        if (err) {\n            res.status(500).send()\n          }\n          else {\n              if(_.isEmpty(result)){\n                  log.debug(\"Dashboard object is empty for enc payerid \" + req.query.eacn);\n                  //insert a dummy record and return the object\n                  var dBoard = {};\n                  dBoard.apps = [];\n                  dBoard.name = req.query.eacn+\" - dashboard\";\n                  dBoard.owner = req.query.eacn;\n\n                  r.table('dashboard').insert(dBoard).run(db.getConnection(), function(err, result){\n                      if(result && result.generated_keys[0]){\n                          log.warn(\"setting the id to dBoard\");\n                          dBoard.id = result.generated_keys[0];\n                          res.status(200).send(dBoard);\n                      }else{\n                          log.info(\"returning empty object\");\n                          res.status(200).send({});\n                      }\n                  });\n\n\n              }else{\n                  log.info(\"Dashboard exists in the DB already for enc payerid \" + req.query.eacn);\n                  res.status(200).send(result);\n              }\n          }\n        });\n}\n\nfunction updateDashboard (req, res, next) {\n\n    r.table('dashboard')\n\n        .get(req.body.id)\n\n        .update(req.body)\n\n        .run(db.getConnection(), function (err, result){\n            if (err) {\n                res.status(500).send()\n            }\n            else {\n                res.status(200).send(result);\n            }\n        });\n}\n\n\nmodule.exports = {\n    getDashboard : getDashboard,\n    updateDashboard: updateDashboard\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":60,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":36,"column":47},"end":{"row":36,"column":47}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/mep/server/controllers/DashboardController.js","digestWhenLastPersisted":"69067dd5d8f285f2893c0ef84a813c3e803b97aa","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"var r = require('rethinkdb'),\n    db = require('../lib/db'),\n    log = require(\"../lib/log\");\n\nfunction getApps (req, res, next) {\n\n  r.table('apps').run(db.getConnection(), function(error, cursor) {\n\n        if (error) {\n          res.status(500).send()\n        } else {\n          cursor.toArray(function(error, result) {\n              if (error) {\n                res.status(500).send()\n              }\n              else {\n                res.status(200).send(result);\n              }\n          });\n        }\n  });  \n}\n\nfunction updateApp (req, res, next) {\n  r.table('apps')\n    .insert(req.body, {conflict : \"update\", returnChanges: true})\n    .run(db.getConnection(), function(error, result) {\n      if (error) {\n        res.status(500).send()\n      } else {\n        res.status(200).send({message : \"App inserted/updated\", result: result})\n      }\n  });  \n}\n\nmodule.exports = {\n    getApps : getApps,\n    updateApp: updateApp\n}","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":26,"id":"0","maintainHistory":false,"markersById":{"0-24":{"range":{"start":{"row":13,"column":37},"end":{"row":13,"column":38}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"0-25":{"range":{"start":{"row":13,"column":36},"end":{"row":13,"column":37}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":13,"column":38},"end":{"row":13,"column":38}},"properties":{"type":"selection","goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":0,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/mep/server/controllers/AppController.js","digestWhenLastPersisted":"d51659e79da8ca06aef904c1e61af95a42060354","preferredLineEnding":null,"deserializer":"TextBuffer","version":4},{"text":"\"use strict\";\n\nvar _ = require('underscore'),\n    log = require('./lib/log'),\n    swaggerTools = require(\"swagger-tools\");\n\nfunction errorHandler (err, req, res, next) {\n\n    if (res.headersSent) {\n        return next(err);\n    }\n    if (err.failedValidation) {\n        \n        if (res.statusCode === 400) {\n            log.info(\"Request validation failed\",  err.toString());\n            res.status(400).json({message : \"Validation error\", details : err.results, text: err.toString()});\n        } else {\n            log.error(\"Response validation failed\",  err.toString());\n            res.status(500).json({message : \"Validation error\", details : err.results, text: err.toString()});\n        }\n        \n    } else {\n        next(err);\n    }\n}\n\nfunction getAPIDoc (apiVersion) {\n    apiVersion = apiVersion || \"v1\";\n    return require('../api/' + apiVersion +  '/content.json');\n}\n\nfunction mountAPI (app, swaggerDoc, options) {\n\n    // Initialize the Swagger middleware\n    swaggerTools.initializeMiddleware(swaggerDoc, function (middleware) {\n\n        // Interpret Swagger resources and attach metadata to request - must be first in swagger-tools middleware chain\n        app.use(middleware.swaggerMetadata());\n\n        // Validate Swagger requests\n        app.use(middleware.swaggerValidator({validateResponse : false}));\n\n        // Route validated requests to appropriate controller\n        app.use(middleware.swaggerRouter(options));\n\n        // Content middleware        \n        // app.use(swaggerDoc.basePath + \"/*\", contentMiddleware);\n\n        // Serve the Swagger documents and Swagger UI\n        app.use(middleware.swaggerUi());\n\n        app.use(errorHandler);\n\n    });\n}\n\nmodule.exports = function (app, options) {\n\n    _.defaults(options, {\n        controllers: __dirname + '/controllers',\n        useStubs: process.env.NODE_ENV === 'development' ? true : false,\n        apis : [\"v1\"]\n    });\n\n    // Initialize DB\n    // require('./lib/db').initConnection(options.db);\n\n    options.apis.forEach(function (apiVersion) {\n        var swaggerDoc = getAPIDoc(apiVersion);\n        mountAPI(app, swaggerDoc, options);\n    });\n};","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":4,"id":"0","maintainHistory":false,"markersById":{"0-2":{"range":{"start":{"row":54,"column":0},"end":{"row":54,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"0-3":{"range":{"start":{"row":31,"column":45},"end":{"row":31,"column":46}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":54,"column":1},"end":{"row":54,"column":1}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"nextMarkerId":8,"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/mep/server/index.js","digestWhenLastPersisted":"f88267a75b663b62833909dc3b2bb1fce413ad89","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/mep/server/lib/db.js","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":36,"softTabs":true,"firstVisibleScreenRow":23,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":37,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/mep/server/index.js","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":8,"softTabs":true,"firstVisibleScreenRow":25,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/mep/server/controllers/DashboardController.js","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":12,"softTabs":true,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":13,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/mep/server/controllers/AppController.js","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/vmaudgalya/projects/mep/server/lib/db.js","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-babel","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"linter":{"scope":"File"},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-12-20T22:56:29.916Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"4":{"id":4,"path":"/Users/vmaudgalya/projects/mep/server/lib/db.js","colorMarkers":[]},"8":{"id":8,"path":"/Users/vmaudgalya/projects/mep/server/controllers/DashboardController.js","colorMarkers":[]},"12":{"id":12,"path":"/Users/vmaudgalya/projects/mep/server/controllers/AppController.js","colorMarkers":[]},"36":{"id":36,"path":"/Users/vmaudgalya/projects/mep/server/index.js","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"find-and-replace":{"findOptions":{"findPattern":"initConnection","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["init","initConnection"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/vmaudgalya/projects/mep/server/lib/db.js":1450505719936,"/Users/vmaudgalya/projects/mep/server/index.js":1450505650084,"/Users/vmaudgalya/projects/mep/server/controllers/DashboardController.js":1450505315176,"/Users/vmaudgalya/projects/mep/server/controllers/AppController.js":1450505304869},"metrics":{"sessionLength":147494368},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/vmaudgalya/projects/mep/server":{"isExpanded":true,"entries":{"config":{"isExpanded":false,"entries":{}},"controllers":{"isExpanded":true,"entries":{}},"lib":{"isExpanded":true,"entries":{}},"test":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/vmaudgalya/projects/mep/server/lib/db.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}
{"version":1,"windowDimensions":{"x":0,"y":23,"width":1038,"height":851,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/vmaudgalya/projects/personal/library/data_structures"],"buffers":[{"text":"/***\n* @author Varun Maudgalya\n* Queue implemented as a circular resizing array\n***/\n\nimport java.util.Iterator;\n\npublic class ArrayQueue<E> implements Iterable<E> {\n\n  private E[] queue;\n  private int front;\n  private int rear;\n  private int size;\n\n  @SuppressWarnings(\"unchecked\")\n  public ArrayQueue() {\n    this.queue = (E[]) new Object[1];\n  }\n\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  public int size() {\n    return size;\n  }\n\n  public void enqueue(final E data) {\n    if (data == null) {\n      throw new NullPointerException(\"Null elements not permitted\");\n    }\n    queue[this.rear] = data;\n    this.size++;\n    if (((this.rear + 1) % this.queue.length) == this.front) {\n      this.resize(2*this.queue.length);\n    }\n    this.rear++;\n  }\n\n  public E dequeue() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    final E data = this.queue[this.front];\n    this.queue[this.front] = null; // Avoid loitering\n    this.front = (this.front + 1) % this.queue.length;\n    size--;\n    return data;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private void resize(int resizedLength) {\n    E[] resizedQueue = (E[]) new Object[resizedLength];\n    for (int i = this.front; i < this.front+this.size; i++) {\n      resizedQueue[i] = queue[i % this.queue.length];\n    }\n    this.queue = resizedQueue;\n  }\n\n  public Iterator<E> iterator() {\n    return new ArrayQueueIterator();\n  }\n\n  private class ArrayQueueIterator implements Iterator<E> {\n\n    private int current;\n\n    public ArrayQueueIterator() {\n      this.current = front;\n    }\n\n    @Override\n    public boolean hasNext() {\n      return (queue[this.current] != null) && (this.current != rear);\n    }\n\n    @Override\n    public E next() {\n      if (isEmpty()) {\n        return null;\n      }\n      final E data = queue[this.current];\n      this.current = (this.current + 1) % queue.length;\n      return data;\n    }\n\n    @Override\n    public void remove() {\n      /* Modification of a list during iteration is not recommended. */\n      throw new UnsupportedOperationException(\"remove() is not supported by this API\");\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder builder = new StringBuilder(\"FRONT [\");\n    for (int i = this.front; i < this.front+this.size; i++) {\n      builder.append(queue[i % queue.length] + (i == this.front+this.size-1 ? \"\" : \", \"));\n    }\n    builder.append(\"] REAR\");\n    return builder.toString();\n  }\n\n}\n","markerStore":{"nextMarkerId":5,"markersById":{"0":{"range":{"start":{"row":103,"column":1},"end":{"row":103,"column":1}},"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"3":{"range":{"start":{"row":103,"column":0},"end":{"row":103,"column":1}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"4":{"range":{"start":{"row":7,"column":50},"end":{"row":7,"column":51}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":6,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[0,0],[0,0]],"properties":{"type":"selection","editorId":8},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[104,0]],"oldText":"","newText":"/***\n* @author Varun Maudgalya\n* Queue implemented as a circular resizing array\n***/\n\nimport java.util.Iterator;\n\npublic class ArrayQueue<E> implements Iterable<E> {\n\n  private E[] queue;\n  private int front;\n  private int rear;\n  private int size;\n\n  @SuppressWarnings(\"unchecked\")\n  public ArrayQueue() {\n    this.queue = (E[]) new Object[1];\n  }\n\n  public boolean isEmpty() {\n    return size == 0;\n  }\n\n  public int size() {\n    return size;\n  }\n\n  public void enqueue(final E data) {\n    if (data == null) {\n      throw new NullPointerException(\"Null elements not permitted\");\n    }\n    queue[this.rear] = data;\n    this.size++;\n    if (((this.rear + 1) % this.queue.length) == this.front) {\n      this.resize(2*this.queue.length);\n    }\n    this.rear++;\n  }\n\n  public E dequeue() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    final E data = this.queue[this.front];\n    this.queue[this.front] = null; // Avoid loitering\n    this.front = (this.front + 1) % this.queue.length;\n    size--;\n    return data;\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private void resize(int resizedLength) {\n    E[] resizedQueue = (E[]) new Object[resizedLength];\n    for (int i = this.front; i < this.front+this.size; i++) {\n      resizedQueue[i] = queue[i % this.queue.length];\n    }\n    this.queue = resizedQueue;\n  }\n\n  public Iterator<E> iterator() {\n    return new ArrayQueueIterator();\n  }\n\n  private class ArrayQueueIterator implements Iterator<E> {\n\n    private int current;\n\n    public ArrayQueueIterator() {\n      this.current = front;\n    }\n\n    @Override\n    public boolean hasNext() {\n      return (queue[this.current] != null) && (this.current != rear);\n    }\n\n    @Override\n    public E next() {\n      if (isEmpty()) {\n        return null;\n      }\n      final E data = queue[this.current];\n      this.current = (this.current + 1) % queue.length;\n      return data;\n    }\n\n    @Override\n    public void remove() {\n      /* Modification of a list during iteration is not recommended. */\n      throw new UnsupportedOperationException(\"remove() is not supported by this API\");\n    }\n  }\n\n  @Override\n  public String toString() {\n    StringBuilder builder = new StringBuilder(\"FRONT [\");\n    for (int i = this.front; i < this.front+this.size; i++) {\n      builder.append(queue[i % queue.length] + (i == this.front+this.size-1 ? \"\" : \", \"));\n    }\n    builder.append(\"] REAR\");\n    return builder.toString();\n  }\n\n}\n"}},{"type":"change","content":{"oldRange":[[0,0],[0,0]],"newRange":[[0,0],[0,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[104,0],[104,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[104,0],[104,0]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[103,1],[104,0]],"newRange":[[103,1],[103,1]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[103,1],[103,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[103,1],[103,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[103,1],[103,1]],"newRange":[[103,1],[104,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[103,1],[103,1]],"properties":{"type":"selection","editorId":8,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java","digestWhenLastPersisted":"8f4906404c55ebb05193b13d25f032c143dbc46a","preferredLineEnding":"\n","deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":8,"softTabs":true,"scrollRow":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":9,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-java","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"linter":{"scope":"File"},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2015-12-02T17:28:54.407Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"8":{"id":8,"path":"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java":1449036642874},"metrics":{"sessionLength":40703752},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/vmaudgalya/projects/personal/library/data_structures":{"isExpanded":true,"entries":{}}},"selectedPath":"/Users/vmaudgalya/projects/personal/library/data_structures/ArrayQueue.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}
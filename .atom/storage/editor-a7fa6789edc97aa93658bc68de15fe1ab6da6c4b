{"version":1,"windowDimensions":{"x":0,"y":0,"width":1440,"height":896,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/vmaudgalya/projects/personal/alg/algs4"],"buffers":[{"id":"3b093541cdcd62cac38be2106a45e386","text":"/******************************************************************************\n *  Compilation: javac IndexMultiwayMinPQ.java\n *  Execution:\n *\n *  An inde  multiway heap.\n *\n ******************************************************************************/\n\npackage edu.princeton.cs.algs4;\n\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\n/**\n *  The IndexMultiwayMinPQ class represents an indexed priority queue of generic keys.\n *  It supports the usual insert and delete-the-minimum operations,\n *  along with delete and change-the-key methods. \n *  In order to let the client refer to keys on the priority queue,\n *  an integer between 0 and N-1 is associated with each key ; the client\n *  uses this integer to specify which key to delete or change.\n *  It also supports methods for peeking at the minimum key,\n *  testing if the priority queue is empty, and iterating through\n *  the keys.\n *  \n *  This implementation uses a multiway heap along with an array to associate\n *  keys with integers in the given range.\n *  For simplified notations, logarithm in base d will be referred as log-d\n *  The delete-the-minimum, delete, change-key and increase-key operations\n *  take time proportional to d*log-d(n)\n *  The insert and decrease-key take time proportional to log-d(n)\n *  The is-empty, min-index, min-key, size, contains and key-of operations take constant time.\n *  Construction takes time proportional to the specified capacity.\n *  \n *  The arrays used in this structure have the first d indices empty,\n *  it apparently helps with caching effects.\n *\n *  @author Tristan Claverie\n */\npublic class IndexMultiwayMinPQ<Key> implements Iterable<Integer> {\n\tprivate final int d;\t\t\t\t//Dimension of the heap\n\tprivate int n;\t\t\t\t\t\t//Number of keys currently in the queue\n\tprivate int nmax;\t\t\t\t\t//Maximum number of items in the queue\n\tprivate int[] pq;\t\t\t\t\t//Multiway heap\n\tprivate int[] qp;\t\t\t\t\t//Inverse of pq : qp[pq[i]] = pq[qp[i]] = i\n\tprivate Key[] keys;\t\t\t\t\t//keys[i] = priority of i\n\tprivate final Comparator<Key> comp; //Comparator over the keys\n\t\n\t\n    /**\n     * Initializes an empty indexed priority queue with indices between 0 and N-1\n     * Worst case is O(n)\n     * @param N number of keys in the priority queue, index from 0 to N-1\n     * @param D dimension of the heap\n     * @throws java.lang.IllegalArgumentException if N < 0\n     * @throws java.lang.IllegalArgumentException if D < 2\n     */\n\tpublic IndexMultiwayMinPQ(int N, int D) {\n\t\tif (N < 0) throw new IllegalArgumentException(\"Maximum number of elements cannot be negative\");\n\t\tif (D < 2) throw new IllegalArgumentException(\"Dimension should be 2 or over\");\n\t\tthis.d = D;\n\t\tnmax = N;\n\t\tpq = new int[nmax+D];\n\t\tqp = new int[nmax+D];\n\t\tkeys = (Key[]) new Comparable[nmax+D];\n\t\tfor (int i = 0; i < nmax+D; qp[i++] = -1);\n\t\tcomp = new MyComparator();\n\t}\n\t\n    /**\n     * Initializes an empty indexed priority queue with indices between 0 and N-1\n     * Worst case is O(n)\n     * @param N number of keys in the priority queue, index from 0 to N-1\n     * @param D dimension of the heap\n     * @param C a Comparator over the keys\n     * @throws java.lang.IllegalArgumentException if N < 0\n     * @throws java.lang.IllegalArgumentException if D < 2\n     */\n\tpublic IndexMultiwayMinPQ(int N, Comparator<Key> C, int D) {\n\t\tif (N < 0) throw new IllegalArgumentException(\"Maximum number of elements cannot be negative\");\n\t\tif (D < 2) throw new IllegalArgumentException(\"Dimension should be 2 or over\");\n\t\tthis.d = D;\n\t\tnmax = N;\n\t\tpq = new int[nmax+D];\n\t\tqp = new int[nmax+D];\n\t\tkeys = (Key[]) new Comparable[nmax+D];\n\t\tfor (int i = 0; i < nmax+D; qp[i++] = -1);\n\t\tcomp = C;\n\t}\n\n\t/**\n\t * Whether the priority queue is empty\n\t * Worst case is O(1)\n\t * @return true if the priority queue is empty, false if not\n\t */\n\tpublic boolean isEmpty() {\n\t\treturn n == 0;\n\t}\n\n\t/**\n\t * Does the priority queue contains the index i ?\n\t * Worst case is O(1)\n\t * @param i an index\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @return true if i is on the priority queue, false if not\n\t */\n\tpublic boolean contains(int i) {\n\t\tif (i < 0 ||i >= nmax) throw new IndexOutOfBoundsException();\n\t\treturn qp[i+d] != -1;\n\t}\n\n\t/**\n\t * Number of elements currently on the priority queue\n\t * Worst case is O(1)\n\t * @return the number of elements on the priority queue\n\t */\n\tpublic int size() {\n\t\treturn n;\n\t}\n\n\t/**\n\t * Associates a key with an index\n\t * Worst case is O(log-d(n))\n\t * @param i an index\n\t * @param key a Key associated with i\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.IllegalArgumentException if the index is already in the queue\n\t */\n\tpublic void insert(int i, Key key) {\n\t\tif (i < 0 || i >= nmax) throw new IndexOutOfBoundsException();\n\t\tif (contains(i)) throw new IllegalArgumentException(\"Index already there\");\n\t\tkeys[i+d] = key;\n\t\tpq[n+d] = i;\n\t\tqp[i+d] = n;\n\t\tswim(n++);\n\t}\n\n\t/**\n\t * Gets the index associated with the minimum key\n\t * Worst case is O(1)\n\t * @throws java.util.NoSuchElementException if the priority queue is empty\n\t * @return the index associated with the minimum key\n\t */\n\tpublic int minIndex() {\n\t\tif (isEmpty()) throw new NoSuchElementException(\"Priority queue is empty\");\n\t\treturn pq[d];\n\t}\n\n\t/**\n\t * Gets the minimum key currently in the queue\n\t * Worst case is O(1)\n\t * @throws java.util.NoSuchElementException if the priority queue is empty\n\t * @return the minimum key currently in the priority queue\n\t */\n\tpublic Key minKey() {\n\t\tif (isEmpty()) throw new NoSuchElementException(\"Priority queue is empty\");\n\t\treturn keys[pq[d]+d];\n\t}\n\n\t/**\n\t * Deletes the minimum key\n\t * Worst case is O(d*log-d(n))\n\t * @throws java.util.NoSuchElementException if the priority queue is empty\n\t * @return the index associated with the minimum key\n\t */\n\tpublic int delMin() {\n\t\tif (isEmpty()) throw new NoSuchElementException(\"Priority queue is empty\");\n\t\tint min = pq[d];\n\t\texch(0, --n);\n\t\tsink(0);\n\t\tqp[min+d] = -1;\n\t\tkeys[pq[n+d]+d] = null;\n\t\tpq[n+d] = -1;\n\t\treturn min;\n\t}\n\n\t/**\n\t * Gets the key associated with index i\n\t * Worst case is O(1)\n\t * @param i an index\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.IllegalArgumentException if the index is not in the queue\n\t * @return the key associated with index i\n\t */\n\tpublic Key keyOf(int i) {\n\t\tif (i < 0 || i >= nmax) throw new IndexOutOfBoundsException();\n\t\tif (! contains(i)) throw new NoSuchElementException(\"Specified index is not in the queue\");\n\t\treturn keys[i+d];\n\t}\n\n\t/**\n\t * Changes the key associated with index i to the given key\n\t * If the given key is greater, Worst case is O(d*log-d(n))\n\t * If the given key is lower,   Worst case is O(log-d(n))\n\t * @param i an index\n\t * @param key the key to associate with i\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.IllegalArgumentException if the index has no key associated with\n\t */\n\tpublic void changeKey(int i, Key key) {\n\t\tif (i < 0 || i >= nmax) throw new IndexOutOfBoundsException();\n\t\tif (! contains(i)) throw new NoSuchElementException(\"Specified index is not in the queue\");\n\t\tKey tmp = keys[i+d];\n\t\tkeys[i+d] = key;\n\t\tif (comp.compare(key, tmp) <= 0) { swim(qp[i+d]);}\n\t\telse \t\t\t\t\t\t\t { sink(qp[i+d]);}\n\t}\n\n\t/**\n\t * Decreases the key associated with index i to the given key\n\t * Worst case is O(log-d(n))\n\t * @param i an index\n\t * @param key the key to associate with i\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.NoSuchElementException if the index has no key associated with\n\t * @throws java.util.IllegalArgumentException if the given key is greater than the current key\n\t */\n\tpublic void decreaseKey(int i, Key key) {\n\t\tif (i < 0 || i >=nmax) throw new IndexOutOfBoundsException();\n\t\tif (! contains(i)) throw new NoSuchElementException(\"Specified index is not in the queue\");\n\t\tif (comp.compare(keys[i+d], key) <= 0) throw new IllegalArgumentException(\"Calling with this argument would not decrease the Key\");\n\t\tkeys[i+d] = key;\n\t\tswim(qp[i+d]);\n\t}\n\n\t/**\n\t * Increases the key associated with index i to the given key\n\t * Worst case is O(d*log-d(n))\n\t * @param i an index\n\t * @param key the key to associate with i\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.NoSuchElementException if the index has no key associated with\n\t * @throws java.util.IllegalArgumentException if the given key is lower than the current key\n\t */\n\tpublic void increaseKey(int i, Key key) {\n\t\tif (i < 0 || i >=nmax) throw new IndexOutOfBoundsException();\n\t\tif (! contains(i)) throw new NoSuchElementException(\"Specified index is not in the queue\");\n\t\tif (comp.compare(keys[i+d], key) >= 0) throw new IllegalArgumentException(\"Calling with this argument would not increase the Key\");\n\t\tkeys[i+d] = key;\n\t\tsink(qp[i+d]);\n\t}\n\n\t/**\n\t * Deletes the key associated to the given index\n\t * Worst case is O(d*log-d(n))\n\t * @param i an index\n\t * @throws java.lang.IndexOutOfBoundsException if the specified index is invalid\n\t * @throws java.util.NoSuchElementException if the given index has no key associated with\n\t */\n\tpublic void delete(int i) {\n\t\tif (i < 0 || i >= nmax) throw new IndexOutOfBoundsException();\n\t\tif (! contains(i)) throw new NoSuchElementException(\"Specified index is not in the queue\");\n\t\tint idx = qp[i+d];\n\t\texch(idx, --n);\n\t\tswim(idx);\n\t\tsink(idx);\n\t\tkeys[i+d] = null;\n\t\tqp[i+d] = -1;\n\t}\n\t\n\t/***************************\n\t * General helper functions\n\t **************************/\n\t\n\t//Compares two keys\n\tprivate boolean greater(int i, int j) {\n\t\treturn comp.compare(keys[pq[i+d]+d], keys[pq[j+d]+d]) > 0;\n\t}\n\t\n\t//Exchanges two keys\n\tprivate void exch(int x, int y) {\n\t\tint i = x+d, j = y+d;\n\t\tint swap = pq[i];\n\t\tpq[i] = pq[j];\n\t\tpq[j] = swap;\n\t\tqp[pq[i]+d] = x;\n\t\tqp[pq[j]+d] = y;\n\t}\n\t\n\t/***************************\n\t * Functions for moving upward or downward\n\t **************************/\n\t\n\t//Moves upward\n\tprivate void swim(int i) {\n\t\tif (i > 0 && greater((i-1)/d, i)) {\n\t\t\texch(i, (i-1)/d);\n\t\t\tswim((i-1)/d);\n\t\t}\n\t}\n\t\n\t//Moves downward\n\tprivate void sink(int i) {\n\t\tif (d*i+1 >= n) return;\n\t\tint min = minChild(i);\n\t\twhile (min < n && greater(i, min)) {\n\t\t\texch(i, min);\n\t\t\ti = min;\n\t\t\tmin = minChild(i);\n\t\t}\n\t}\n\t\n\t/***************************\n\t * Deletes the minimum child\n\t **************************/\n\t\n\t//Return the minimum child of i\n\tprivate int minChild(int i) {\n\t\tint loBound = d*i+1, hiBound = d*i+d;\n\t\tint min = loBound;\n\t\tfor (int cur = loBound; cur <= hiBound; cur++) {\n\t\t\tif (cur < n && greater(min, cur)) min = cur;\n\t\t}\n\t\treturn min;\n\t}\n\t\n\t/***************************\n\t * Iterator\n\t **************************/\n\t\n\t/**\n\t * Gets an Iterator over the indexes in the priority queue in ascending order\n\t * The Iterator does not implement the remove() method\n\t * iterator() : Worst case is O(n)\n\t * next() : \tWorst case is O(d*log-d(n))\n\t * hasNext() : \tWorst case is O(1)\n\t * @return an Iterator over the indexes in the priority queue in ascending order\n\t */\n\t\n\tpublic Iterator<Integer> iterator() {\n\t\treturn new MyIterator();\n\t}\n\t\n\t//Constructs an Iterator over the indices in linear time\n\tprivate class MyIterator implements Iterator<Integer> {\n\t\tIndexMultiwayMinPQ<Key> clone;\n\t\t\n\t\tpublic MyIterator() {\n\t\t\tclone = new IndexMultiwayMinPQ<Key>(nmax, comp, d);\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tclone.insert(pq[i+d], keys[pq[i+d]+d]);\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean hasNext() {\n\t\t\treturn !clone.isEmpty();\n\t\t}\n\t\t\n\t\tpublic Integer next() {\n\t\t\treturn clone.delMin();\n\t\t}\n\t\t\n\t\tpublic void remove() {\n\t\t\tthrow new UnsupportedOperationException();\n\t\t}\n\t}\n\t\n\t/***************************\n\t * Comparator\n\t **************************/\n\t\n\t//default Comparator\n\tprivate class MyComparator implements Comparator<Key> {\n\t\t@Override\n\t\tpublic int compare(Key key1, Key key2) {\n\t\t\treturn ((Comparable<Key>) key1).compareTo(key2);\n\t\t}\n\t}\n\n}\n\n/******************************************************************************\n *  Copyright 2002-2015, Robert Sedgewick and Kevin Wayne.\n *\n *  This file is part of algs4.jar, which accompanies the textbook\n *\n *      Algorithms, 4th edition by Robert Sedgewick and Kevin Wayne,\n *      Addison-Wesley Professional, 2011, ISBN 0-321-57351-X.\n *      http://algs4.cs.princeton.edu\n *\n *\n *  algs4.jar is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  algs4.jar is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with algs4.jar.  If not, see http://www.gnu.org/licenses.\n ******************************************************************************/\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"4":{"range":{"start":{"row":113,"column":21},"end":{"row":113,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"5":{"range":{"start":{"row":113,"column":19},"end":{"row":113,"column":20}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":113,"column":22},"end":{"row":113,"column":22}},"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":4,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java","digestWhenLastPersisted":"ed5dc5c3c4db363042db197552a15aa2ac4ae474","preferredLineEnding":null,"nextMarkerId":6,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":60,"softTabs":true,"firstVisibleScreenRow":87,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":61,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java","bufferId":"3b093541cdcd62cac38be2106a45e386","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-java","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/Arbitrage.java","/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMaxPQ.java","/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMinPQ.java","/Users/vmaudgalya/projects/personal/alg/algs4/.gitignore","atom://find-and-replace/project-results"]},"packageStates":{"linter":{"scope":"File"},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-02-26T02:09:49.042Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"60":{"id":60,"path":"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"find-and-replace":{"findOptions":{"findPattern":"assocated","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["assocated","assocate","assocated"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java":1456368470455},"keybinding-resolver":{},"metrics":{"sessionLength":232714869},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/vmaudgalya/projects/personal/alg/algs4":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"main":{"isExpanded":true,"entries":{"java":{"isExpanded":true,"entries":{"edu":{"isExpanded":true,"entries":{"princeton":{"isExpanded":true,"entries":{"cs":{"isExpanded":true,"entries":{"algs4":{"isExpanded":true,"entries":{}}}}}}}}}}}}}}}}},"selectedPath":"/Users/vmaudgalya/projects/personal/alg/algs4/src/main/java/edu/princeton/cs/algs4/IndexMultiwayMinPQ.java","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":1747,"width":480}},"fullScreen":false}
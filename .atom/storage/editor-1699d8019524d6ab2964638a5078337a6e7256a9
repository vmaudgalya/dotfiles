{"version":1,"windowDimensions":{"x":0,"y":23,"width":1440,"height":852,"maximized":true},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/vmaudgalya/projects/sample"],"buffers":[{"text":"var fs = require(\"fs\");\nvar path = require(\"path\");\nvar webpackDevMiddleware = require(\"webpack-dev-middleware\");\nvar express = require(\"express\");\nvar compress = require(\"compression\");\nvar sockjs = require(\"sockjs\");\nvar StreamCache = require(\"stream-cache\");\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar httpProxy = require(\"http-proxy\");\nvar proxy = new httpProxy.createProxyServer({secure: false});\nvar serveIndex = require(\"serve-index\");\nvar historyApiFallback = require(\"connect-history-api-fallback\");\n\nfunction Server(compiler, options) {\n\t// Default options\n\tif(!options) options = {};\n\n\tif (options.lazy && !options.filename) {\n\t\tthrow new Error(\"'filename' option must be set in lazy mode.\");\n\t}\n\n\tthis.hot = options.hot;\n\tthis.headers = options.headers;\n\tthis.sockets = [];\n\n\t// Listening for events\n\tvar invalidPlugin = function() {\n\t\tthis.sockWrite(this.sockets, \"invalid\");\n\t}.bind(this);\n\tcompiler.plugin(\"compile\", invalidPlugin);\n\tcompiler.plugin(\"invalid\", invalidPlugin);\n\tcompiler.plugin(\"done\", function(stats) {\n\t\tthis._sendStats(this.sockets, stats.toJson());\n\t\tthis._stats = stats;\n\t}.bind(this));\n\n\t// Prepare live html page\n\tvar livePage = this.livePage = new StreamCache();\n\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"live.html\")).pipe(livePage);\n\n\t// Prepare the live js file\n\tvar liveJs = new StreamCache();\n\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"live.bundle.js\")).pipe(liveJs);\n\n\t// Prepare the inlined js file\n\tvar inlinedJs = new StreamCache();\n\tfs.createReadStream(path.join(__dirname, \"..\", \"client\", \"index.bundle.js\")).pipe(inlinedJs);\n\n\t// Init express server\n\tvar app = this.app = new express();\n\n\t// middleware for serving webpack bundle\n\tthis.middleware = webpackDevMiddleware(compiler, options);\n\n\tapp.get(\"/__webpack_dev_server__/live.bundle.js\", function(req, res) {\n\t\tres.setHeader(\"Content-Type\", \"application/javascript\");\n\t\tliveJs.pipe(res);\n\t});\n\n\tapp.get(\"/webpack-dev-server.js\", function(req, res) {\n\t\tres.setHeader(\"Content-Type\", \"application/javascript\");\n\t\tinlinedJs.pipe(res);\n\t});\n\n\tapp.get(\"/webpack-dev-server/*\", function(req, res) {\n\t\tres.setHeader(\"Content-Type\", \"text/html\");\n\t\tthis.livePage.pipe(res);\n\t}.bind(this));\n\n\tapp.get(\"/webpack-dev-server\", function(req, res) {\n\t\tres.setHeader(\"Content-Type\", \"text/html\");\n\t\tres.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body>');\n\t\tvar path = this.middleware.getFilenameFromUrl(options.publicPath || \"/\");\n\t\tvar fs = this.middleware.fileSystem;\n\t\tfunction writeDirectory(baseUrl, basePath) {\n\t\t\tvar content = fs.readdirSync(basePath);\n\t\t\tres.write(\"<ul>\");\n\t\t\tcontent.forEach(function(item) {\n\t\t\t\tvar p = basePath + \"/\" + item;\n\t\t\t\tif(fs.statSync(p).isFile()) {\n\t\t\t\t\tres.write('<li><a href=\"');\n\t\t\t\t\tres.write(baseUrl + item);\n\t\t\t\t\tres.write('\">');\n\t\t\t\t\tres.write(item);\n\t\t\t\t\tres.write('</a></li>');\n\t\t\t\t\tif(/\\.js$/.test(item)) {\n\t\t\t\t\t\tvar htmlItem = item.substr(0, item.length - 3);\n\t\t\t\t\t\tres.write('<li><a href=\"');\n\t\t\t\t\t\tres.write(baseUrl + htmlItem);\n\t\t\t\t\t\tres.write('\">');\n\t\t\t\t\t\tres.write(htmlItem);\n\t\t\t\t\t\tres.write('</a> (magic html for ');\n\t\t\t\t\t\tres.write(item);\n\t\t\t\t\t\tres.write(') (<a href=\"');\n\t\t\t\t\t\tres.write(baseUrl.replace(/(^(https?:\\/\\/[^\\/]+)?\\/)/, \"$1webpack-dev-server/\") + htmlItem);\n\t\t\t\t\t\tres.write('\">webpack-dev-server</a>)</li>');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres.write('<li>');\n\t\t\t\t\tres.write(item);\n\t\t\t\t\tres.write('<br>');\n\t\t\t\t\twriteDirectory(baseUrl + item + \"/\", p);\n\t\t\t\t\tres.write('</li>');\n\t\t\t\t}\n\t\t\t});\n\t\t\tres.write(\"</ul>\");\n\t\t}\n\t\twriteDirectory(options.publicPath || \"/\", path);\n\t\tres.end('</body></html>');\n\t}.bind(this));\n\n\tvar features = {\n\t\tcompress: function() {\n\t\t\tif (options.compress) {\n\t\t\t\t// Enable gzip compression.\n\t\t\t\tapp.use(compress());\n\t\t\t}\n\t\t}.bind(this),\n\n\t\tproxy: function() {\n\t\t\tif (options.proxy) {\n\t\t\t\tif (!Array.isArray(options.proxy)) {\n\t\t\t\t\toptions.proxy = Object.keys(options.proxy).map(function (path) {\n\t\t\t\t\t\tvar proxyOptions;\n\t\t\t\t\t\tif (typeof options.proxy[path] === 'string') {\n\t\t\t\t\t\t\tproxyOptions = {path: path, target: options.proxy[path]};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tproxyOptions = options.proxy[path];\n\t\t\t\t\t\t\tproxyOptions.path = path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn proxyOptions;\n\t\t\t\t\t});\n\t\t\t\t}\n        if (options.onProxyReq) {\n          proxy.on('proxyReq', options.onProxyReq);\n        }\n\t\t\t\toptions.proxy.forEach(function (proxyOptions) {\n\t\t\t\t\tproxyOptions.ws = proxyOptions.hasOwnProperty('ws') ? proxyOptions.ws : true;\n\t\t\t\t\tapp.all(proxyOptions.path, function (req, res, next) {\n\t\t\t\t\t\tvar bypassUrl = typeof proxyOptions.bypass === 'function' ? proxyOptions.bypass(req, res, proxyOptions) : false;\n\t\t\t\t\t\tif (bypassUrl) {\n\t\t\t\t\t\t\treq.url = bypassUrl;\n\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(typeof proxyOptions.rewrite === 'function') proxyOptions.rewrite(req, proxyOptions);\n\t\t\t\t\t\t\tif (proxyOptions.host) {\n\t\t\t\t\t\t\t\treq.headers.host = proxyOptions.host;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tproxy.web(req, res, proxyOptions, function(err){\n\t\t\t\t\t\t\t\tvar msg = \"cannot proxy to \" + proxyOptions.target + \" (\" + err.message + \")\";\n\t\t\t\t\t\t\t\tthis.sockWrite(this.sockets, \"proxy-error\", [msg]);\n\t\t\t\t\t\t\t\tres.statusCode = 502;\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t\t\tif (proxyOptions.configure) {\n\t\t\t\t\t\t\t\tproxyOptions.configure(proxy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this));\n\t\t\t\t}.bind(this));\n\t\t\t}\n\t\t}.bind(this),\n\n\t\thistoryApiFallback: function() {\n\t\t\tif (options.historyApiFallback) {\n\t\t\t\t// Fall back to /index.html if nothing else matches.\n\t\t\t\tapp.use(historyApiFallback(typeof options.historyApiFallback === 'object' ? options.historyApiFallback : null));\n\t\t\t}\n\t\t}.bind(this),\n\n\t\tcontentBase: function() {\n\t\t\tif(options.contentBase !== false) {\n\t\t\t\tvar contentBase = options.contentBase || process.cwd();\n\n\t\t\t\tif(typeof contentBase === \"object\") {\n\t\t\t\t\tconsole.log('Using contentBase as a proxy is deprecated and will be removed in the next major version. Please use the proxy option instead.\\n\\nTo update remove the contentBase option from webpack.config.js and add this:');\n\t\t\t\t\tconsole.log('proxy: {\\n\\t\"*\": <your current contentBase configuration>\\n}');\n\t\t\t\t\t// Proxy every request to contentBase.target\n\t\t\t\t\tapp.all(\"*\", function(req, res) {\n\t\t\t\t\t\tproxy.web(req, res, contentBase, function(err) {\n\t\t\t\t\t\t\tvar msg = \"cannot proxy to \" + contentBase.target + \" (\" + err.message + \")\";\n\t\t\t\t\t\t\tthis.sockWrite(this.sockets, \"proxy-error\", [msg]);\n\t\t\t\t\t\t\tres.statusCode = 502;\n\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t}.bind(this));\n\t\t\t\t} else if(/^(https?:)?\\/\\//.test(contentBase)) {\n\t\t\t\t\t// Redirect every request to contentBase\n\t\t\t\t\tapp.get(\"*\", function(req, res) {\n\t\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t\t'Location': contentBase + req.path + (req._parsedUrl.search || \"\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\tres.end();\n\t\t\t\t\t}.bind(this));\n\t\t\t\t} else if(typeof contentBase === \"number\") {\n\t\t\t\t\t// Redirect every request to the port contentBase\n\t\t\t\t\tapp.get(\"*\", function(req, res) {\n\t\t\t\t\t\tres.writeHead(302, {\n\t\t\t\t\t\t\t'Location': \"//localhost:\" + contentBase + req.path + (req._parsedUrl.search || \"\")\n\t\t\t\t\t\t});\n\t\t\t\t\t\tres.end();\n\t\t\t\t\t}.bind(this));\n\t\t\t\t} else {\n\t\t\t\t\t// route content request\n\t\t\t\t\tapp.get(\"*\", express.static(contentBase), serveIndex(contentBase));\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this),\n\n\t\tmiddleware: function() {\n\t\t\t// include our middleware to ensure it is able to handle '/index.html' request after redirect\n\t\t\tapp.use(this.middleware);\n\t\t}.bind(this),\n\n\t\theaders: function() {\n\t\t\tapp.get(\"*\", this.setContentHeaders.bind(this));\n\t\t}.bind(this),\n\n\t\tmagicHtml: function() {\n\t\t\tapp.get(\"*\", this.serveMagicHtml.bind(this));\n\t\t}.bind(this),\n\n\t\tsetup: function() {\n\t\t\tif(typeof options.setup === \"function\")\n\t\t\t\toptions.setup(app);\n\t\t}.bind(this)\n\t};\n\n\tvar defaultFeatures = [\"setup\", \"headers\", \"middleware\"];\n\tif(options.proxy)\n\t\tdefaultFeatures.push(\"proxy\");\n\tif(options.historyApiFallback)\n\t\tdefaultFeatures.push(\"historyApiFallback\", \"middleware\");\n\tdefaultFeatures.push(\"magicHtml\");\n\tif(options.contentBase !== false)\n\t\tdefaultFeatures.push(\"contentBase\");\n\t// compress is placed last and uses unshift so that it will be the first middleware used\n\tif(options.compress)\n\t\tdefaultFeatures.unshift(\"compress\");\n\n\t(options.features || defaultFeatures).forEach(function(feature) {\n\t\tfeatures[feature]();\n\t}, this);\n\n\tif (options.https) {\n\t\t// for keep supporting CLI parameters\n\t\tif (typeof options.https === 'boolean') {\n\t\t\toptions.https = {\n\t\t\t\tkey: options.key,\n\t\t\t\tcert: options.cert,\n\t\t\t\tca: options.ca\n\t\t\t};\n\t\t}\n\n\t\t// using built-in self-signed certificate if no certificate was configured\n\t\toptions.https.key = options.https.key || fs.readFileSync(path.join(__dirname, \"../ssl/server.key\"));\n\t\toptions.https.cert = options.https.cert || fs.readFileSync(path.join(__dirname, \"../ssl/server.crt\"));\n\t\toptions.https.ca = options.https.ca || fs.readFileSync(path.join(__dirname, \"../ssl/ca.crt\"));\n\n\t\tthis.listeningApp = https.createServer(options.https, app);\n\t} else {\n\t\tthis.listeningApp = http.createServer(app);\n\t}\n}\n\nServer.prototype.use = function() {\n\tthis.app.use.apply(this.app, arguments);\n}\n\nServer.prototype.setContentHeaders = function(req, res, next) {\n\tif(this.headers) {\n\t\tfor(var name in this.headers) {\n\t\t\tres.setHeader(name, this.headers[name]);\n\t\t}\n\t}\n\n\tnext();\n}\n\n// delegate listen call and init sockjs\nServer.prototype.listen = function() {\n\tthis.listeningApp.listen.apply(this.listeningApp, arguments);\n\tvar sockServer = sockjs.createServer({\n\t\t// Limit useless logs\n\t\tlog: function(severity, line) {\n\t\t\tif (severity === \"error\") {\n\t\t\t\tconsole.log(line);\n\t\t\t}\n\t\t}\n\t});\n\tsockServer.on(\"connection\", function(conn) {\n\t\tthis.sockets.push(conn);\n\n\t\t// Remove the connection when it's closed\n\t\tconn.on(\"close\", function() {\n\t\t\tvar connIndex = this.sockets.indexOf(conn);\n\t\t\tif (connIndex >= 0) {\n\t\t\t\tthis.sockets.splice(connIndex, 1);\n\t\t\t}\n\t\t}.bind(this));\n\n\t\tif(this.hot) this.sockWrite([conn], \"hot\");\n\t\tif(!this._stats) return;\n\t\tthis._sendStats([conn], this._stats.toJson(), true);\n\t}.bind(this));\n\n\tsockServer.installHandlers(this.listeningApp, {\n\t\tprefix: '/sockjs-node'\n\t});\n}\n\nServer.prototype.close = function() {\n\tthis.sockets.forEach(function(sock) {\n\t\tsock.close();\n\t});\n\tthis.sockets = [];\n\tthis.middleware.close();\n}\n\nServer.prototype.sockWrite = function(sockets, type, data) {\n\tsockets.forEach(function(sock) {\n\t\tsock.write(JSON.stringify({type: type, data: data}));\n\t});\n}\n\nServer.prototype.serveMagicHtml = function(req, res, next) {\n\tvar _path = req.path;\n\ttry {\n\t\tif(!this.middleware.fileSystem.statSync(this.middleware.getFilenameFromUrl(_path + \".js\")).isFile())\n\t\t\treturn next();\n\t\t// Serve a page that executes the javascript\n\t\tres.write('<!DOCTYPE html><html><head><meta charset=\"utf-8\"/></head><body><script type=\"text/javascript\" charset=\"utf-8\" src=\"');\n\t\tres.write(_path);\n\t\tres.write('.js');\n\t\tres.write(req._parsedUrl.search || \"\");\n\t\tres.end('\"></script></body></html>');\n\t} catch(e) { return next(); }\n}\n\n// send stats to a socket or multiple sockets\nServer.prototype._sendStats = function(sockets, stats, force) {\n\tif(!force && stats && (!stats.errors || stats.errors.length === 0) && stats.assets && stats.assets.every(function(asset) {\n\t\treturn !asset.emitted;\n\t})) return this.sockWrite(sockets, \"still-ok\");\n\tthis.sockWrite(sockets, \"hash\", stats.hash);\n\tif(stats.errors.length > 0)\n\t\tthis.sockWrite(sockets, \"errors\", stats.errors);\n\telse if(stats.warnings.length > 0)\n\t\tthis.sockWrite(sockets, \"warnings\", stats.warnings);\n\telse\n\t\tthis.sockWrite(sockets, \"ok\");\n}\n\nServer.prototype.invalidate = function() {\n\tif(this.middleware) this.middleware.invalidate();\n}\n\nmodule.exports = Server;\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"nextMarkerId":0,"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"nextMarkerId":0,"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"nextMarkerId":1,"id":"2","maintainHistory":true,"markersById":{"2-0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection"},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2}},"nextMarkerLayerId":3,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js","digestWhenLastPersisted":"b45e7af9d1f6cf2f5e28b2406f6b5cedc3559f60","preferredLineEnding":null,"deserializer":"TextBuffer","version":4}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":true,"firstVisibleScreenRow":118,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"}],"activeItemURI":"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js","focused":false,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-babel","language-hyperlink","language-todo"],"destroyedItemURIs":[]},"packageStates":{"linter":{"scope":"File"},"pigments":{"project":{"deserializer":"ColorProject","timestamp":"2016-01-04T23:31:13.890Z","version":"1.0.1","markersVersion":"1.0.5","globalSourceNames":["**/*.styl","**/*.stylus","**/*.less","**/*.sass","**/*.scss"],"globalIgnoredNames":["vendor/*","node_modules/*","spec/*","test/*"],"buffers":{"4":{"id":4,"path":"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js","colorMarkers":[]}},"paths":[],"variables":{"deserializer":"VariablesCollection","content":[]}}},"fuzzy-finder":{"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js":1451950265950},"metrics":{"sessionLength":29009},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/vmaudgalya/projects/sample":{"isExpanded":true,"entries":{"node_modules":{"isExpanded":true,"entries":{".bin":{"isExpanded":false,"entries":{}},"accepts":{"isExpanded":false,"entries":{}},"ansi-regex":{"isExpanded":false,"entries":{}},"array-flatten":{"isExpanded":false,"entries":{}},"batch":{"isExpanded":false,"entries":{}},"bytes":{"isExpanded":false,"entries":{}},"compressible":{"isExpanded":false,"entries":{}},"compression":{"isExpanded":false,"entries":{}},"connect-history-api-fallback":{"isExpanded":false,"entries":{}},"content-disposition":{"isExpanded":false,"entries":{}},"content-type":{"isExpanded":false,"entries":{}},"cookie":{"isExpanded":false,"entries":{}},"cookie-signature":{"isExpanded":false,"entries":{}},"core-util-is":{"isExpanded":false,"entries":{}},"debug":{"isExpanded":false,"entries":{}},"depd":{"isExpanded":false,"entries":{}},"destroy":{"isExpanded":false,"entries":{}},"ee-first":{"isExpanded":false,"entries":{}},"errno":{"isExpanded":false,"entries":{}},"escape-html":{"isExpanded":false,"entries":{}},"etag":{"isExpanded":false,"entries":{}},"eventemitter3":{"isExpanded":false,"entries":{}},"eventsource":{"isExpanded":false,"entries":{}},"express":{"isExpanded":false,"entries":{}},"faye-websocket":{"isExpanded":false,"entries":{}},"finalhandler":{"isExpanded":false,"entries":{}},"forwarded":{"isExpanded":false,"entries":{}},"fresh":{"isExpanded":false,"entries":{}},"has-flag":{"isExpanded":false,"entries":{}},"http-errors":{"isExpanded":false,"entries":{}},"http-proxy":{"isExpanded":false,"entries":{}},"inherits":{"isExpanded":false,"entries":{}},"ipaddr.js":{"isExpanded":false,"entries":{}},"isarray":{"isExpanded":false,"entries":{}},"json3":{"isExpanded":false,"entries":{}},"media-typer":{"isExpanded":false,"entries":{}},"memory-fs":{"isExpanded":false,"entries":{}},"mep-webpack-dev-server":{"isExpanded":true,"entries":{"bin":{"isExpanded":false,"entries":{}},"client":{"isExpanded":false,"entries":{}},"lib":{"isExpanded":true,"entries":{}},"ssl":{"isExpanded":false,"entries":{}}}},"merge-descriptors":{"isExpanded":false,"entries":{}},"methods":{"isExpanded":false,"entries":{}},"mime":{"isExpanded":false,"entries":{}},"mime-db":{"isExpanded":false,"entries":{}},"mime-types":{"isExpanded":false,"entries":{}},"minimist":{"isExpanded":false,"entries":{}},"ms":{"isExpanded":false,"entries":{}},"negotiator":{"isExpanded":false,"entries":{}},"node-uuid":{"isExpanded":false,"entries":{}},"on-finished":{"isExpanded":false,"entries":{}},"on-headers":{"isExpanded":false,"entries":{}},"optimist":{"isExpanded":false,"entries":{}},"original":{"isExpanded":false,"entries":{}},"parseurl":{"isExpanded":false,"entries":{}},"path-to-regexp":{"isExpanded":false,"entries":{}},"process-nextick-args":{"isExpanded":false,"entries":{}},"proxy-addr":{"isExpanded":false,"entries":{}},"prr":{"isExpanded":false,"entries":{}},"qs":{"isExpanded":false,"entries":{}},"querystringify":{"isExpanded":false,"entries":{}},"range-parser":{"isExpanded":false,"entries":{}},"readable-stream":{"isExpanded":false,"entries":{}},"requires-port":{"isExpanded":false,"entries":{}},"send":{"isExpanded":false,"entries":{}},"serve-index":{"isExpanded":false,"entries":{}},"serve-static":{"isExpanded":false,"entries":{}},"sockjs":{"isExpanded":false,"entries":{}},"sockjs-client":{"isExpanded":false,"entries":{}},"statuses":{"isExpanded":false,"entries":{}},"stream-cache":{"isExpanded":false,"entries":{}},"string_decoder":{"isExpanded":false,"entries":{}},"strip-ansi":{"isExpanded":false,"entries":{}},"supports-color":{"isExpanded":false,"entries":{}},"type-is":{"isExpanded":false,"entries":{}},"unpipe":{"isExpanded":false,"entries":{}},"url-parse":{"isExpanded":false,"entries":{}},"util-deprecate":{"isExpanded":false,"entries":{}},"utils-merge":{"isExpanded":false,"entries":{}},"vary":{"isExpanded":false,"entries":{}},"webpack-dev-middleware":{"isExpanded":false,"entries":{}},"websocket-driver":{"isExpanded":false,"entries":{}},"websocket-extensions":{"isExpanded":false,"entries":{}},"wordwrap":{"isExpanded":false,"entries":{}}}}}}},"selectedPath":"/Users/vmaudgalya/projects/sample/node_modules/mep-webpack-dev-server/lib/Server.js","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":649,"width":200}},"fullScreen":false}